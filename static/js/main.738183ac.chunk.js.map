{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Title/Title.js","components/PokeCard/PokeCard.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Title","PokeCard","onClick","selectPokemon","id","CurrentScore","alt","name","src","image","Nav","href","message","currentScore","topScore","App","state","pokemon","unselectedMon","shufflePokemon","array","i","length","j","Math","floor","random","_ref","undefined","_this","find","item","setState","newMon","filter","_this2","this","components_Wrapper_Wrapper","components_Title_Title","components_Nav_Nav","map","pokeEntry","components_PokeCard_PokeCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.738183ac.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => (\n    <div className=\"titleBox\">\n        <h1>{props.children}</h1>\n    </div>\n\n);\n\nexport default Title;\n\n","import React from \"react\";\nimport \"./PokeCard.css\";\n\nconst PokeCard = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n    <span onClick={() => props.selectPokemon(props.id)} className={props.CurrentScore === 0 ? \"pokedex-entry\" : \"\"} > \n      <img className=\"dexter\" alt={props.name} src={props.image} />\n      </span>\n    </div>\n  </div>\n);\n\nexport default PokeCard;\n","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n    <div className=\" nav navBarThingy nav-justified\">\n        <div className=\"col-md-4\" id=\"classLink\">  <a href=\"/\">Clicky Game</a></div>\n        <div className=\"col-md-4\">{props.message}</div>\n        <div className=\"col-md-4\" id=\"scoreTick\">Score: {props.currentScore} | Top Score: {props.topScore}</div>\n    </div>\n)\n\nexport default Nav;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport PokeCard from \"./components/PokeCard\";\nimport Nav from \"./components/Nav\";\nimport './App.css';\nimport pokemon from \"./pokemon.json\";\n\n\n\nclass App extends Component {\n  state = {\n    message: \"Begin by clicking on an image!\",\n    currentScore: 0,\n    topScore: 0,\n    pokemon: pokemon,\n    unselectedMon: pokemon\n  }\n\n  shufflePokemon = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  \n  selectPokemon = id => {\n    \n    const findMon = this.state.unselectedMon.find(item => item.id === id);\n    if (findMon === undefined) {\n      this.setState({\n        message: \"Not very effective\",\n        currentScore: 0,\n        topScore: this.state.currentScore > this.state.topScore ? this.state.currentScore : this.state.topScore,\n        pokemon: pokemon,\n        unselectedMon: pokemon\n      });\n    } else {\n      const newMon = this.state.unselectedMon.filter(item => item.id !== id);\n      this.setState({\n        message: \"It's super effective!\",\n        currentScore: this.state.currentScore + 1,\n        pokemon: pokemon,\n        unselectedMon: newMon\n      });\n    }\n  \n    this.shufflePokemon(pokemon);\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Clicky Game: Pok√©mon Edition</Title>\n        <Nav\n          message={this.state.message}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        {this.state.pokemon.map(pokeEntry => (\n          <PokeCard\n            key={pokeEntry.id}\n            id={pokeEntry.id}\n            name={pokeEntry.name}\n            image={pokeEntry.image}\n            selectPokemon={this.selectPokemon}\n            currentScore={this.state.currentScore}\n          />\n        ))}\n      </Wrapper>\n\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}